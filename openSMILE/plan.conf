; Feature Extraction plan for writing MFCC, Spectral Flux, and Spectral Shape statistics to 
; separate files.  The plan takes advantage of shared/duplicate calculations.

[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[waveIn].type=cWaveSource
instance[frame].type=cFramer
instance[win].type=cWindower
instance[fft].type=cTransformFFT
instance[fftmag].type=cFFTmagphase
instance[melspec].type=cMelspec
instance[mfcc].type=cMfcc
instance[flux].type=cSpectral
instance[stats].type=cSpectral
instance[mfccCsvSink].type = cCsvSink
instance[fluxCsvSink].type = cCsvSink
instance[statsCsvSink].type = cCsvSink

nThreads=1
; do not show any internal dataMemory level settings 
; (if you want to see them set the value to 1, 2, 3, or 4, depending on the amount of detail you wish)
printLevelStats=0

[waveIn:cWaveSource]
 ; this sets the level this component writes to
 ; the level will be created by this component
 ; no other components may write to a level having the same name
writer.dmLevel=wave
 ; this defines a new commandline option "-I" or "-inputfile", which can be used to specify 
 ; the filename on the commandline instead of having it "hard-coded" in the config file
filename=\cm[inputfile(I){test.wav}:name of input file]
 ; mix stereo files down to mono for analysis
monoMixdown=1

[frame:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
noPostEOIprocessing = 1
copyInputName = 1
; ~ 1024 samples
frameSize = 0.02322
; ~ 512 samples
frameStep = 0.01161
frameMode = fixed
frameCenterSpecial = left

[win:cWindower]
reader.dmLevel=frames
writer.dmLevel=winframes
copyInputName = 1
processArrayFields = 1
winFunc = Han
gain = 1.0
offset = 0

[fft:cTransformFFT]
reader.dmLevel=winframes
writer.dmLevel=fft
copyInputName = 1
processArrayFields = 1
inverse = 0

[fftmag:cFFTmagphase]
reader.dmLevel=fft
writer.dmLevel=fftmag
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[melspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=melspec
copyInputName = 1
processArrayFields = 1
; htk compatible sample value scaling
htkcompatible = 1
nBands = 40
; use power spectrum instead of magnitude spectrum
usePower = 0
lofreq = 130.0
hifreq = 6854.0
specScale = mel
inverse = 0

[mfcc:cMfcc]
reader.dmLevel=melspec
writer.dmLevel=mfcc
writer.levelconf.growDyn=1
writer.levelconf.isRb=0
buffersize=1000
copyInputName = 1
processArrayFields = 1
firstMfcc = 0
nMfcc  = 13
cepLifter = 22.0
htkcompatible = 0

[flux:cSpectral]
reader.dmLevel=fftmag
writer.dmLevel=flux
copyInputName = 1
processArrayFields = 1
squareInput = 1
bands[0]=0-250
bands[1]=0-650
bands[2]=250-650
bands[3]=1000-4000
bands[4]=3010-9123
rollOff[0] = 0.25
rollOff[1] = 0.50
rollOff[2] = 0.75
rollOff[3] = 0.90
flux = 1
centroid = 0
maxPos = 0
minPos = 0
entropy = 0
variance = 0
skewness = 0
kurtosis = 0
slope = 0

[stats:cSpectral]
reader.dmLevel=fftmag
writer.dmLevel=stats
copyInputName = 1
processArrayFields = 1
squareInput = 1
bands[0]=0-250
bands[1]=0-650
bands[2]=250-650
bands[3]=1000-4000
bands[4]=3010-9123
rollOff[0] = 0.25
rollOff[1] = 0.50
rollOff[2] = 0.75
rollOff[3] = 0.90
flux = 0
centroid = 1
maxPos = 0
minPos = 0
entropy = 0
variance = 1
skewness = 1
kurtosis = 1
slope = 0


  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

[mfccCsvSink:cCsvSink]
reader.dmLevel = mfcc
; filename = mymfcc.csv
filename = \cm[mfccout(M){mfcc.output.csv}:file name of the mfcc output CSV file]
delimChar = ,
append = 0
timestamp = 1
number = 1
printHeader = 1

[fluxCsvSink:cCsvSink]
reader.dmLevel = flux
; filename = myflux.csv
filename = \cm[fluxout(F){flux.output.csv}:file name of the flux output CSV file]
delimChar = ,
append = 0
timestamp = 1
number = 1
printHeader = 1

[statsCsvSink:cCsvSink]
reader.dmLevel = stats
; filename = mystats.csv
filename = \cm[statsout(S){stats.output.csv}:file name of the spectral stats output CSV file]
delimChar = ,
append = 0
timestamp = 1
number = 1
printHeader = 1





